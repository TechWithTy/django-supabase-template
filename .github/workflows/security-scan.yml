name: Security Scan

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '_docs/**'
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
  workflow_dispatch:

jobs:
  security-check:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          pip install -r requirements.txt

      - name: Run Safety Check
        run: safety scan -r requirements.txt --output text
        continue-on-error: true

      - name: Run Bandit
        run: bandit -r backend/ -f json -o bandit-results.json
        continue-on-error: true

      - name: Upload Bandit Results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: bandit-results.json

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'django-supabase-template'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --enableExperimental
            --scan requirements.txt

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

  jwt-security:
    name: JWT Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyjwt cryptography

      - name: Check JWT Implementation
        run: |
          grep -r "jwt\\.decode" backend/ || echo "No insecure JWT decode found"
          grep -r "verify=False" backend/ || echo "No JWT verification bypasses found"

  redis-security:
    name: Redis Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install redis-security-audit

      - name: Check Redis Security Configuration
        run: |
          grep -r "REDIS_URL" backend/ --include="*.py" | grep -v "os\\.getenv" || echo "All Redis connections use environment variables"
          grep -r "StrictRedis\\|Redis(" backend/ --include="*.py" | grep -E "ssl=True|ssl_cert_reqs" || echo "SSL verification checks needed for Redis in production"

  notify-results:
    name: Notify Security Results
    needs: [security-check, dependency-check, jwt-security, redis-security]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Security Scan Results
        uses: slackapi/slack-github-action@v1.24.0
        if: ${{ github.event_name != 'pull_request' && always() }}
        with:
          payload: |
            {
              "text": "Security scan completed for ${{ github.repository }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Security Scan Completed for ${{ github.repository }}*\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:* ${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Status:* ${{ job.status }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
